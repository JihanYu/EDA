<<<<<<< HEAD
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training.IL, method="pca", pcaComp=9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
(1+58)/82
(2+58)/82
(4+57)/82
preProc <- preProcess(training.IL, method="pca", thresh=0.9)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
##### Problem 5 #####
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL.id <- c(58:69)
training.IL <- training[, c(IL.id)]
testing.IL <- testing[, c(IL.id)]
preProc <- preProcess(training.IL, method="pca", thresh=0.8)
trainPC <- predict(preProc, training.IL)
modelFit <- train(x=trainPC, y=training$diagnosis, method="glm")
testPC <- predict(preProc, testing.IL)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
rm(list=ls())
##### Quiz 1 #####
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
##### Quiz 3 #####
library(pgmm)
install.packages("pgmm")
##### Quiz 3 #####
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
##### Quiz 4 #####
library(ElemStatLearn)
install.packages("ElemStatLearn")
install.packages("Rtools")
version
version
install.packages("Rtools")
##### Quiz 1 #####
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
names(segmentationOriginal)
names(segmentationOriginal$Case)
head(segmentationOriginal$Case)
training <- subset(Case=="Train")
?subset
training <- subset(segmentationOriginal, Case=="Train")
sum(segmentationOriginal$Case=="Train")
head(segmentationOriginal$Cell)
head(segmentationOriginal$Class)
training <- subset(segmentationOriginal, Case=="Train")
testing <- subset(segmentationOriginal, Case=="Test")
set.seed(125)
modelFit <- train(Class ~ ., method="rpart", data=training)
print(modelFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modelFit$finalModel)
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5988801, popup="Jee Leek")
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5988801, popup="Jee Leek")
my_map
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>%
addMarkers(lat=39.298, lng=-76.598, popup="Jee Leek")
my_map
set.seed(2016-04-25)
df <- data.frame(lat=runif(20, min=39.2, max=39.3),
lng=runif(20, min=-76.6, max=-76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
df
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5988801, popup="Jee Leek")
my_map
set.seed(2016-04-25)
df <- data.frame(lat=runif(20, min=39.2, max=39.3),
lng=runif(20, min=-76.6, max=-76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
df <- data.frame(lat=runif(500, min=39.25, max=39.35),
lng=runif(500, min=-76.65, max=-76.55))
df %>%
leaflet %>%
addTiles %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat=runif(20, min=39.25, max=39.35),
lng=runif(20, min=-76.65, max=-76.55))
df %>%
leaflet %>%
addTiles %>%
addCircleMarkers()
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map
View(my_map)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map <- leaflet() %>%
addTiles()
my_map <- mymap %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map <- my_map %>%
addMarkers(lat=37.434424, lng=127.128252, pop="Jihan's clinic")
my_map <- leaflet() %>%
addTiles()
my_map <- my_map %>%
addMarkers(lat=37.434424, lng=127.128252, popup="Jihan's clinic")
my_map
rm(list=ls())
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=37.434424, lng=127.128252, popup="Jihan's clinic")
my_map
library(leaflet)
##### List of hospital at Sungnam city #####
hosp.list <- matrix( c(
37.434424, 127.128252, "St Mary's will hospital",
37.433154, 127.129692, "SK healthcare center",
37.432860, 127.130368, "Moran Yeonsei clinic",
37.430488, 127.128846, "Sinui clinic",
37.430714, 127.129783, "Moran mental health clinic",
37.438611, 127.127411, "Saesomang hospital",
37.439907, 127.128970, "Chung Hospital",
37.440874, 127.132449, "Sungnam orthopediatric clinic",
37.441811, 127.135692, "Jeil psychologic clinic",
37.442557, 127.137967, "Clean psychologic clinic",
37.443762, 127.140183, "Jiwoo hospital",
37.440821, 127.130456, "Kwack women's hospital",
37.440633, 127.131486, "Soo clinic",
37.440838, 127.132129, "Yeonsei Internal medicine clinic",
37.446012, 127.134176, "E-med hospital",
37.442571, 127.136386, "Hansol orthopediatric clinic",
37.445280, 127.139068, "Sungnam Clinic",
37.444189, 127.143145, "Ha clinic",
37.438090, 127.140806, "Cham Seoul Radiology",
37.439334, 127.142995, "Happy psychologic clinic",
37.439998, 127.144003, "Huen hospital",
37.439573, 127.145227, "MaumBit psychologic clinic",
37.442605, 127.150956, "Good dream psychologic clinic",
37.448984, 127.145335, "Hyosaran hospital",
37.453127, 127.161924, "Sungnam Joongang hospital",
37.445466, 127.162470, "Barunmadi hospital",
37.416550, 127.120654, "Bundang Yeonsei hospital",
37.410524, 127.126844, "Barunsesang hospital",
37.413127, 127.129211, "Bundang Chuck hospital",
37.410066, 127.125418, "Cha general hospital",
37.412331, 127.129733, "Best Bundang clinic",
37.412741, 127.129156, "Sungmo psychologic clinic",
37.413560, 127.129511, "Yeonsei Modoo clinic",
37.417368, 127.126759, "Joongang Leader's dental clinic",
37.417079, 127.133981, "Kids-M pediatric clinic" ), ncol=3, byrow=TRUE)
hosp.list <- as.data.frame(hosp.list)
colnames(hosp.list) <- c("lat", "lng", "hosp.name")
### adjusting variable types ###
hosp.list$lat <- as.character(hosp.list$lat)
hosp.list$lat <- as.numeric(hosp.list$lat)
hosp.list$lng <- as.character(hosp.list$lng)
hosp.list$lng <- as.numeric(hosp.list$lng)
hosp.list$hosp.name <- as.character(hosp.list$hosp.name)
##### Draw map - popup & cluster #####
hosp.list[, c(1, 2)] %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup=hosp.list$hosp.name, clusterOptions = markerClusterOptions()) %>%
addRectangles(lat1=37.410, lng1=127.120,
lat2=37.455, lng2=127.163,
fillColor="transparent")
library(plotly)
install.packages("plotly")
library(plotly)
head(mpg)
?mpg
?mtcars
head(mtcars)
dim(mpg)
dim(mtcars)
dim(mpg)
str(mpg)
table(mpg$manufacturer)
table(mpg$model)
table(mpg$trans)
table(mpg$drv)
table(mpg$fl)
table(mpg$class)
head(mpg)
table(mpg$displ)
table(mpg$cty)
table(mpg$hwy)
str(mpg)
head(mpg)
table(mpg$displ)
plot(displ, cty, data=mpg)
plot(displ~cty, data=mpg)
plot(cty~hwy, data=mpg)
plot(mpg)
is.na(mpg)
sum(is.na(mpg))
plot(mpg)
head(mtcars)
plot(mtcars)
plot(mpg~wt, data=mtcars)
head(mpt)
head(mpg)
str(mpg)
head(mtcars)
plot(mpg~cyl, data=mtcars)
plot(mpg~factor(cyl), data=mtcars)
g <- ggplot(mpg~wt, data=mtcars)
g <- ggplot(mpg~wt, data=mtcars) + aes()
rm(list=ls())
version()
version
library(library(shiny)
ui <- fluidPage(
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
install.packages("shiny")
library(shiny)
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
? rnorm
shiny::runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp()
runApp('C:/Users/pc/Desktop/Jihan/DDP')
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1;  std.drv1 <- 1
one.two <- TRUE
n1 <- NA;  n1.n0 <- 1;
two.sided <- 1;
mu1 <- mu0 + effect.size;
if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
est.sample.size <- ( (za + zb)^2 * std.drv0^2 * (q12) ) / (effect.size^2)
if(is.na(n1)){
n1 <- est.sample.size
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1, linetype="dashed", show.legend=TRUE) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE),
mean=mu1, sd=std.err1, lower.tail=FALSE)
cat("suggested sample size :", est.sample.size, "\n")
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
runApp('C:/Users/pc/Desktop/Jihan/DDP')
rm(list=ls())
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='0zhbiQTbLDfBsQmB6AN3xrFJyYoEubCPV0Uc52Cw')
shiny::runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
runApp('C:/Users/pc/Desktop/Jihan/DDP')
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
dbDisconnect(ucscDb)
result
head(result)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU1339Plus2")
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQUery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10)
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex", "class"))
submit()
students3
submit()
submit()
=======
submit()
submit()
?gather
?gather
submit()
students3
str(students3)
str(students3)
submit()
# the five possible classes, there are lots of missing
# values (i.e. NAs). Use the argument na.rm = TRUE
# to omit these values from the final result.
#
# Remember that when you're using the %>% operator,
# the value to the left of it gets inserted as the
# first argument to the function on the right.
#
# Consult ?gather and/or ?chain if you get stuck.
#
students3 %>%
gather( "name", class1:class5 , na.rm= TRUE) %>%
print
submit()
students3
submit()
reset()
swirl()
submit
submit()
reset()
a
b
swirl()
students3
submit()
submit()
"A":"E"
submit()
submit()
?spread()
?spread
>>>>>>> 4b281b46752dd3d997d3d6ee34201ad3a57d1273
?spread
submit()
submit()
submit()
<<<<<<< HEAD
students
students3
submit()
students3
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm=TRUE) %>% print
=======
submit()
submit()
>>>>>>> 4b281b46752dd3d997d3d6ee34201ad3a57d1273
submit()
submit()
submit()
submit()
library(swirl)
swirl()
str(mpg)
<<<<<<< HEAD
library(swirl())
swirl()
0
0
q
quit
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
=======
plot(disp, hwy, data=mpg)
plot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, aes(col=drv))
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv) + geom(point, smooth)
qplot(displ, hwy, data=mpg, color=drv, geom(c("point", "smooth")))
library(ggplot2)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom=c("boxplot"))
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, aes=drv)
qplot(hwy, data=mpg, aes="drv")
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, bindwidth=2)
qplot(displ, hwy, data=mpg, facets=drv~., bindwidth=2)
qplot(hwy, data=mpg, facets=drv ~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facet=.~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
ggplot(data=mpg, displ, hwy)
ggplot(displ, hwy, data=mpg)
g <- ggplot(displ, hwy, data=mpg)
?mpg
g <- qplot(displ, hwy, data=mpg)
g <- ggplot(mpg, aes(displ, hwy))
g
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(lm)
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="facet_grid")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + xlab()
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + lab()
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size=4, alpha=1/2)
g + geom_point(size=4, alpha=1/2, aes=(color=drv))
g + geom_point(size=4, alpha=1/2, aes=(color="drv"))
g + geom_point(aes(color=drv), size=4, alpha=1.2)
g + geom_point(aes(color=drv), size=4, alpha=1/2)
g + geom_point(aes(color=drv), size=4, alpha=1/2)
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement, y="Hwy Mileage"")
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(color=drv, size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
theme_bw
g + geom_point(aes(color=drv)) + theme_bw(base_family="Times")
plot()
myx
plot(myx, myy, type="l", ylim=c(-3,3))
g + ggplot(x=myx, y=myy)
g + ggplot(aes(x=myx, y=myy))
g + ggplot(testdata, aes(x=myx, y=myy))
g + ggplot(testdat, aes(x=myx, y=myy))
g + ggplot(data = testdat, aes(x=myx, y=myy))
library(ggplot2)
g <- ggplot(testdat, aes(x=myx, y=myy))
g + geom_line()
g + geom_line(ylim=c(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line + coord_cartesian(ylim=c(-3,3))
g + geom_line + coord_cartesian() + ylim(-3,3)
g + geom_line() + coord_cartesian() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g
g + geom_point()
facet_grid(drv~cyl, margins=TRUE)
g + geom_point() = facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black") + title(x=Displacement", y="Highway Mileage)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds) + geom_hist()
qplot(price, data=diamonds) + geom_histogram()
qplot(price, data=diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, bindwidth=18497/30)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30)
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(price, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, shape=cut, color=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, depth, price)
g <- ggplot(diamonds, aes(depth, price))
g
summary(g)
g + geom_point(alpha=1/3)
quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
quantile()
diamonds$car2 <- quantile(diamonds$carat)
diamonds$car2 <- quantile(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot2(diamonds, aes(depth, price))
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
myd
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
g + geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
dist(dataFrame)
hs <- hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
as.dendogram(hs)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
cut(dendrogram)
cut(as.dendrogram(hc))
abline(h=4, color="red")
abline(h=4, col="red")
abline(h=4, col="red")
abline(h=.4, col="red")
5
abline(h=0.05)
5
4
5
9
10
11
12
abline(h=0.05)
dFsm
dist(Fsm)
dist(dFsm)
hc
heatmap
heatmap(dataMatrix, col=cm.colors(25))
mtcars
heatmap(mt)
disparity
color()
heatmap(disparity)
heatmap(mt)
mt
heatmap(denmt)
dentmt
denmt <- hclust(mt)
plot(disp, hp)
plot(disp, hp, data=mt)
mt
plot(disp, hp, data=mt)
plot(denmt)
distmt
cmat
plot(cx, cy, col=c("red", "orange", "purple"))
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist
mdist(x, y, cx, cy)
distTmp
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(x, y, pch=8, cex=2, col=cols1[newClust], lwd=2)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
y
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=col1, pch=9, cex=2, lwd=2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, center=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
addPatt.R(myedit)
myedit
myedit("addPatt.R")
course("addPatt.R", local=TRUE)
s]ourse("addPatt.R", local=TRUE)
sourse("addPatt.R", local=TRUE)
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd
svd(mat)
t(matv)
matu %*% diag %*% t(matv)
svd(mat)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1$v[,1]
t(svd1$d)
svd1$d
constantMatrix
head(constantMatrix)
svd2
svd2$d
svd2
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
svd1$u[,1] * svd1$d[,1]
svd1$u[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage
myImage(a1)
svd1$d[1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5]))
myImage(a2)
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10]))
dim(ssd)
names(ssd)
namds(ssd[562:"563"
])
names(ssd[562:"563"
])
names(ssd[562:563])
ssd$subject
table(ssd$subject)
table(ssd$subject)
sum(table(ssd$subject))
ssd$activity
table(ssd$activity)
subset(ssd, subject==1)
sub1 <- subset(ssd, subject==1)
sub1
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe()
showMe(sub1[, 1:12])
showMe(1:6)
dist(mdist[, 1:3])
mdist
mdist <- dist(sub1[, 1:3])
hclust
hclustering <- hclust(mdist)
unclass(sub1$activity)
myplclust((hclustering, lab.col=unclass(sub1$activity)))
myplclust(hclustering, lab.col=unclass(sub1$activity))
dist(sub1$x[,10:12])
dist(mdist, sub1[, 10:12])
dist
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd()
svd(scale(sub1[, -c(562, 563)]))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd1$y)
dim(svd1$u)
which.max(maxCon, svd1$v)
which.max
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[, 10:12])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclust(mdist)
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1, centers=6)
kClust <- kmeans(sub1[, 10:12], centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers=6)
table(kCluster$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity, nstart=100)
kClust <- kmeans(sub1[, -c(562, 563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kCluster$centers)
dim(kClust$centers)
which(kClust$size==29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="walkdown Cluster")
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
library(swirl)
>>>>>>> 4b281b46752dd3d997d3d6ee34201ad3a57d1273
swirl()
dim(pm0)
head(pm0)
cnames
<<<<<<< HEAD
strsplit(cnames, "|")
cnames <- strsplit(cnames, "|", fixed=TRUE)
cnames
names(pm0) <- cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
Sample.Value
m$n
pm0$Sample.Value
x0 <- pm0$Sample.Value
str(x0)
is.na(x0)
mean(is.na(x0))
make.names(cnames[[1]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
pm1
=======
cnames <- strsplit(cnames, sep="|", fixed=TRUE)
cnames <- strsplit(cnames, "|", fixed=TRUE)
cnames
names(pm0)
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
pm0
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0), na.rm=TRUE)
mean(is.na(x0))
names(pm1) <- make.names(cnmaes[[1]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
>>>>>>> 4b281b46752dd3d997d3d6ee34201ad3a57d1273
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
<<<<<<< HEAD
x1 < 0
=======
>>>>>>> 4b281b46752dd3d997d3d6ee34201ad3a57d1273
negative <- x1 < 0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
<<<<<<< HEAD
as.Date(as.character(dates, "%Y%m%d"))
as.Date(as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(date[negative], "months")
hist(dates[negative])
hist(dates[negative], "months")
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, intersect)
cnt0 <- subset(pm0, intersection %in% membership)
cnt0 <- subset(pm0, (State.Code==36) & (State.Code %in% "country.site"))
cnt0 <- subset(pm0, State.Code == 36 & country.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site, nrow))
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\EDA"
setwd(workingpath)
## This first line will likely take a few seconds. Be patient!
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
str(NEI)
NEI$fips <- as.numeric(NEI$fips)
NEI$Pollutant <- as.factor(NEI$Pollutant)
NEI$type <- as.factor(NEI$type)
library(dplyr)
NEI.tot <- NEI %>%
group_by(year) %>%
summarize(Emi.Tot <- sum(Emissions))
NEI.tot
NEI.tot <- NEI %>%
group_by(year) %>%
summarize(Emi.Tot = sum(Emissions))
NEI.tot
NEI$year <- as.factor(NEI$year)
library(dplyr)
NEI.tot <- NEI %>%
group_by(year) %>%
summarize(Emi.Tot = sum(Emissions))
with(plot(Emi.Tot, year))
with(NEI.tot, plot(Emi.Tot, year))
with(NEI.tot, plot(year, Emi.Tot))
with(NEI.tot, plot(year, Emi.Tot, type="l"))
boxplot(year, Emi.Tot, data=NEI.tot)
with(NEI.tot, boxplot(year, Emi.Tot))
with(NEI.tot, barplot(year, Emi.Tot))
with(NEI.tot, barplot(year))
barplot(year, data=NEI.tot)
barplot(Emi.Tot, data=NEI.tot)
NEI.tot
>barplot()
?barplot
barplot(Emi.Tot ~ year, data=NEI.tot)
=======
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dats)
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code==36 & county.site %in% vector())
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both
)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mar=c(4,4,2,1))
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(h=median(pm25), lwd=2)
abline(h=median(x0sub), lwd=2, na.rm=TRUE)
abline(h=median(x0sub, na.rm=TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm=TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <-
)
mn0 <- tapply(pm0, Sample.Value, State.Code)
om0
pm0
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn0
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, set="state")
mrg <- merge(d0, d1, by="state")
dim(mrg)
mrg
head(mrg)
with (mrg, plot(rep(1, 52), mrg[,2], xlim=c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
points(x, y)
points(x=2)
segments(rep(1, 52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\EDA"
setwd(workingpath)
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
NEI$Pollutant <- factor(NEI$Pollutant)
NEI$type <- factor(NEI$type, levels=c("POINT", "NONPOINT", "ON-ROAD", "NON-ROAD"))
NEI$year <- factor(NEI$year)
library(dplyr);  library(ggplot2)
NEI.BT.type.tot <- NEI %>%
group_by(year, type) %>%
summarize(Emi.Tot = sum(Emissions))
png(filename = "plot3.png")
g <- ggplot(data=NEI.BT.type.tot, aes(x=year, y=Emi.Tot, fill=type))
g + geom_bar(stat="identity", position="dodge") +
labs(title="Total emission in Baltimore City", x="year", y="total emission")
dev.off()
png(filename = "plot3.png")
g <- ggplot(data=NEI.BT.type.tot, aes(x=year, y=Emi.Tot, fill=type))
g + geom_bar(stat="identity", position="dodge") +
ggtitle("Total emission in Baltimore City") +
xlab("year") + ylab("total emission")
dev.off()
png(filename = "plot3.png")
g <- ggplot(data=NEI.BT.type.tot, aes(x=year, y=Emi.Tot, fill=type))
g + geom_bar(stat="identity", position="dodge") +
ggtitle("Total emission in Baltimore City") +
xlab("year") + ylab("total emission") +
theme(plot.title=element_text(size=14, face="bold"))
dev.off()
?theme
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\EDA"
setwd(workingpath)
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
NEI$Pollutant <- factor(NEI$Pollutant)
NEI$type <- factor(NEI$type, levels=c("POINT", "NONPOINT", "ON-ROAD", "NON-ROAD"))
NEI$year <- factor(NEI$year)
NEI.BT <- subset(NEI, fips=="24510")
library(dplyr);  library(ggplot2)
NEI.BT.type.tot <- NEI.BT %>%
group_by(year, type) %>%
summarize(Emi.Tot = sum(Emissions))
png(filename = "plot3.png")
g <- ggplot(data=NEI.BT.type.tot, aes(x=year, y=Emi.Tot, fill=type))
g + geom_bar(stat="identity", position="dodge") +
ggtitle("Total emission in Baltimore City") +
xlab("year") + ylab("total emission") +
theme(plot.title=element_text(size=16, face="bold"))
dev.off()
head(SCC)
head(NEI)
str(SCC)
levels(SCC$EI.Sector)
levels(SCC$EI.Sector) %in% "coal"
"coal" %in% levels(SCC$EI.Sector)
class(levels(SCC$EI.Sector))
levels(SCC$EI.Sector)
a <- levels(SCC$EI.Sector)
a
a %in% "coal"
a %in% "Coal"
a[c(13, 18, 23)]
dim(NEI)
dim(SCC)
>>>>>>> 4b281b46752dd3d997d3d6ee34201ad3a57d1273
